'use strict';

var restaurant = void 0,
    reviews = void 0,
    initMap = void 0,
    fetchRestaurantFromURL = void 0,
    fillRestaurantHTML = void 0,
    getParameterByName = void 0,
    fillRestaurantHoursHTML = void 0,
    fillReviewsHTML = void 0,
    createReviewHTML = void 0,
    fillBreadcrumb = void 0,
    event = void 0;var newMap, addReview;var offlineReviews = [];var offlineReviewsFromLocalStorage = [];document.addEventListener("DOMContentLoaded", function (event) {
  initMap();
});initMap = function initMap() {
  fetchRestaurantFromURL().then(function (restaurant) {
    self.newMap = L.map('map', { center: [restaurant.latlng.lat, restaurant.latlng.lng], zoom: 16, scrollWheelZoom: !1 });L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', { mapboxToken: 'pk.eyJ1IjoibXJwdW1wa2luZyIsImEiOiJjamoyNXUzcDIwenpyM2tsZm03MDJnOHFqIn0.K5wTgEieIuewCzBwoLVGRw', maxZoom: 18, attribution: '', id: 'mapbox.streets' }).addTo(newMap);fillBreadcrumb();DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);
  }).catch(function (error) {
    return console.error(error);
  });
};
fetchRestaurantFromURL = function fetchRestaurantFromURL() {
  if (self.restaurant) {
    return Promise.resolve(self.restaurant);
  }
  var id = parseInt(getParameterByName('id'));if (!id || id === NaN) {
    return Promise.reject('No restaurant id in URL');
  } else {
    return DBHelper.fetchRestaurantById(id).then(function (restaurant) {
      if (!restaurant) {
        return Promise.reject('Restaurant with ID ' + id + ' was not found');
      }
      self.restaurant = restaurant;fillRestaurantHTML();return restaurant;
    });
  }
};
fillRestaurantHTML = function fillRestaurantHTML() {
  var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant;
  var name = document.getElementById("restaurant-name");name.innerHTML = restaurant.name;var address = document.getElementById("restaurant-address");address.innerHTML = restaurant.address;var image = document.getElementById("restaurant-img");image.alt = restaurant.name;var restaurant_photograph = restaurant.id;var small_images = restaurant_photograph + "_300.webp";var large_images = restaurant_photograph + "_600.webp";image.sizes = "(max-width: 325px) 100vw 50vw";var options = { threshold: 0.2 };var observer = void 0;if ('IntersectionObserver' in window) {
    observer = new IntersectionObserver(events, options);observer.observe(image);
  } else {
    displayImages(image);
  }
  var displayImages = function displayImages(image) {
    image.className = 'restaurant-img';image.src = DBHelper.imageUrlForRestaurant(restaurant);image.srcset = "banners/" + small_images + " 1x" + "," + "banners/" + large_images + " 2x";
  };
  function events(events, observer) {
    events.forEach(function (event) {
      if (event.intersectionRatio > 0) {
        displayImages(event.target);observer.unobserve(event.target);
      } else {}
    });
  }
  var cuisine = document.getElementById("restaurant-cuisine");cuisine.innerHTML = restaurant.cuisine_type;if (restaurant.operating_hours) {
    fillRestaurantHoursHTML();
  }
  DBHelper.fetchReviewsByRestaurantId(restaurant.id).then(function (reviews) {
    return fillReviewsHTML(reviews);
  });
};fillRestaurantHoursHTML = function fillRestaurantHoursHTML() {
  var operatingHours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant.operating_hours;
  var hours = document.getElementById("restaurant-hours");for (var key in operatingHours) {
    var row = document.createElement("tr");var day = document.createElement("td");day.innerHTML = key;row.appendChild(day);var time = document.createElement("td");time.innerHTML = operatingHours[key];row.appendChild(time);hours.appendChild(row);
  }
};fillReviewsHTML = function fillReviewsHTML() {
  var reviews = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant.reviews;
  var container = document.getElementById("reviews-container");var title = document.createElement("h2");title.innerHTML = "Reviews";container.appendChild(title);var id = parseInt(getParameterByName('id'));if (!reviews) {
    var noReviews = document.createElement("p");noReviews.innerHTML = "No reviews yet!";container.appendChild(noReviews);return;
  }
  var ul = document.getElementById("reviews-list");reviews.forEach(function (review) {
    ul.appendChild(createReviewHTML(review));
  });container.appendChild(ul);
};createReviewHTML = function createReviewHTML(review) {
  var li = document.createElement("li");li.tabIndex = 0;var name = document.createElement("p");name.innerHTML = review.name;li.appendChild(name);var date = document.createElement("p");var convertedDate = new Date(review.createdAt).toLocaleString();date.innerHTML = convertedDate;li.appendChild(date);var rating = document.createElement("p");rating.innerHTML = 'Rating: ' + review.rating;li.appendChild(rating);var comments = document.createElement("p");comments.innerHTML = review.comments;li.appendChild(comments);return li;
};addReview = function addReview() {
  console.log("clicked submit");var url = window.location.href;var id = getParameterByName('id');var name = document.getElementById('reviewer_name').value;var rating = document.getElementById('select_rating');var rating_value = rating.options[rating.selectedIndex].value;var comment = document.getElementById('reviewer_comment').value;if (name == "") {
    alert("Name must be filled out");return !1;
  } else if (comment == "") {
    alert("Comment must be filled out");return !1;
  } else {
    var jsonToSend = { "restaurant_id": id, "name": name, "createdAt": new Date(), "rating": rating_value, "comments": comment };
    var offline_obj = { data: jsonToSend, name: 'addReview', object_type: "review" };
    if (!navigator.onLine && offline_obj.name === 'addReview') {
      DBHelper.sendReviewsWhenOnline(offline_obj);var _container = document.getElementById("reviews-container");var _ul = document.getElementById("reviews-list");_ul.insertBefore(createReviewHTML(offline_obj.data), _ul.childNodes[0]);_container.appendChild(_ul);var reviewForm = document.getElementById('reviewForm');reviewForm.reset();return;
    }
    console.log("sending reviews", jsonToSend);DBHelper.sendReviewsToServer(jsonToSend);var container = document.getElementById("reviews-container");var ul = document.getElementById("reviews-list");ul.insertBefore(createReviewHTML(jsonToSend), ul.childNodes[0]);container.appendChild(ul);var reviewForm = document.getElementById('reviewForm');reviewForm.reset();
  }
};
fillBreadcrumb = function fillBreadcrumb() {
  var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant;
  var breadcrumb = document.getElementById("breadcrumb");var li = document.createElement("li");li.innerHTML = restaurant.name;breadcrumb.appendChild(li);
};getParameterByName = function getParameterByName(name, url) {
  if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
      results = regex.exec(url);if (!results) return null;if (!results[2]) return "";return decodeURIComponent(results[2].replace(/\+/g, " "));
};