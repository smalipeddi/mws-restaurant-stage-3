"use strict";

var Restaurants = void 0,
    resetRestaurants = void 0,
    addMarkersToMap = void 0,
    createRestaurantHTML = void 0,
    neighborhoods = void 0,
    updateRestaurants = void 0,
    updateRestaurant = void 0,
    event = void 0,
    initMap = void 0,
    fetchNeighborhoods = void 0,
    fillNeighborhoodsHTML = void 0,
    fetchCuisines = void 0,
    fillCuisinesHTML = void 0,
    fillRestaurantsHTML = void 0,
    cuisines = void 0,
    newMap = void 0,
    markers = [];document.addEventListener("DOMContentLoaded", function (event) {
  initMap();fetchNeighborhoods();fetchCuisines();
});fetchNeighborhoods = function fetchNeighborhoods() {
  DBHelper.fetchNeighborhoods(function (error, neighborhoods) {
    if (error) {
      console.error(error);
    } else {
      self.neighborhoods = neighborhoods;fillNeighborhoodsHTML();
    }
  });
};fillNeighborhoodsHTML = function fillNeighborhoodsHTML() {
  var neighborhoods = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.neighborhoods;
  var select = document.getElementById("neighborhoods-select");neighborhoods.forEach(function (neighborhood) {
    var option = document.createElement("option");option.innerHTML = neighborhood;option.value = neighborhood;select.append(option);
  });
};fetchCuisines = function fetchCuisines() {
  DBHelper.fetchCuisines(function (error, cuisines) {
    if (error) {
      console.error(error);
    } else {
      self.cuisines = cuisines;fillCuisinesHTML();
    }
  });
};fillCuisinesHTML = function fillCuisinesHTML() {
  var cuisines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.cuisines;
  var select = document.getElementById("cuisines-select");cuisines.forEach(function (cuisine) {
    var option = document.createElement("option");option.innerHTML = cuisine;option.value = cuisine;select.append(option);
  });
};initMap = function initMap() {
  newMap = L.map("map", { center: [40.722216, -73.987501], zoom: 12, scrollWheelZoom: !1 });L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token=pk.eyJ1Ijoic2ZyZW5zIiwiYSI6ImNqaWVzeWJnMjBwb3Yzc3Q0bml3OGo5bnQifQ.XLzOLAtnX3pMu70zmA5YlQ", { mapboxToken: "pk.eyJ1Ijoic2ZyZW5zIiwiYSI6ImNqaWVzeWJnMjBwb3Yzc3Q0bml3OGo5bnQifQ.XLzOLAtnX3pMu70zmA5YlQ", maxZoom: 18, attribution: "Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, " + "<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, " + "Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>", id: "mapbox.streets" }).addTo(newMap);updateRestaurants();
};updateRestaurants = function updateRestaurants() {
  var cSelect = document.getElementById("cuisines-select");var nSelect = document.getElementById("neighborhoods-select");var cIndex = cSelect.selectedIndex;var nIndex = nSelect.selectedIndex;var cuisine = cSelect[cIndex].value;var neighborhood = nSelect[nIndex].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, function (error, restaurants) {
    if (error) {
      console.error(error);
    } else {
      resetRestaurants(restaurants);fillRestaurantsHTML();
    }
  });
};resetRestaurants = function resetRestaurants(restaurants) {
  self.restaurants = [];var ul = document.getElementById("restaurants-list");ul.innerHTML = "";if (self.markers) {
    self.markers.forEach(function (marker) {
      return marker.remove();
    });
  }
  self.markers = [];self.restaurants = restaurants;
};fillRestaurantsHTML = function fillRestaurantsHTML() {
  var restaurants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurants;
  var ul = document.getElementById("restaurants-list");restaurants.forEach(function (restaurant) {
    ul.append(createRestaurantHTML(restaurant));
  });addMarkersToMap();
};createRestaurantHTML = function createRestaurantHTML(restaurant) {
  var offlineRestaurantFromLocalStorage = DBHelper.getRestaurantsFromlocalStorage(restaurant.id);if (offlineRestaurantFromLocalStorage !== undefined && offlineRestaurantFromLocalStorage.length !== 0) {
    var offlineRes = offlineRestaurantFromLocalStorage;restaurant = offlineRes;
  }
  var li = document.createElement("li");li.role = "listitem";li.tabIndex = 0;var image = document.createElement("img");image.className = "restaurant-img";image.src = DBHelper.imageUrlForRestaurant(restaurant);image.alt = restaurant.name;var restaurant_photograph = restaurant.id;var small_images = restaurant_photograph + "-1x.webp";var large_images = restaurant_photograph + "-2x.webp";image.srcset = "images/" + small_images + " 1x" + "," + "images/" + large_images + " 2x";image.src = "img/" + restaurant_photograph;image.sizes = "(max-width: 325px) 100vw 50vw";li.append(image);var div = document.createElement("div");li.append(div);var name = document.createElement("h2");name.innerHTML = restaurant.name;div.append(name);var fav = document.createElement("img");if (restaurant.is_favorite === "true") {
    fav.src = "icons/like.svg";fav.alt = "add to favorite";fav.title = "add to favourite";
  }
  if (restaurant.is_favorite === "false") {
    fav.src = "icons/unlike.svg";fav.alt = "remove from favorite";fav.title = "remove to favourite";
  }
  var anchor = document.createElement("a");anchor.onclick = function () {
    if (restaurant.is_favorite === "true") {
      restaurant.is_favorite = "false";fav.src = "icons/unlike.svg";
      fav.alt = "remove from favorite";
    } else {
      restaurant.is_favorite = "true";fav.src = "icons/like.svg";fav.alt = "add to favorite";
    }
    if (window.navigator.onLine) {
      DBHelper.sendRestaurantFavoriteToServer(restaurant.id, restaurant.is_favorite);
    } else {
      var existing = localStorage.getItem('restaurant_favorite');existing = existing ? JSON.parse(existing) : [];existing.push(restaurant);localStorage.setItem('restaurant_favorite', JSON.stringify(existing));
    }
    this.append(fav);
  };
  anchor.append(fav);div.append(anchor);var neighborhood = document.createElement("p");neighborhood.innerHTML = restaurant.neighborhood;div.append(neighborhood);var address = document.createElement("p");address.innerHTML = restaurant.address;div.append(address);var more = document.createElement("button");more.innerHTML = "View Details";more.onclick = function () {
    var url = DBHelper.urlForRestaurant(restaurant);window.location = url;
  };div.append(more);return li;
};addMarkersToMap = function addMarkersToMap() {
  var restaurants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurants;
  restaurants.forEach(function (restaurant) {
    var marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);marker.on("click", onClick);function onClick() {
      window.location.href = marker.options.url;
    }
    self.markers.push(marker);
  });
};