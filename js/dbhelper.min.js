class DBHelper{static get DATABASE_URL(){const port=1337;return `http://localhost:${port}/`}
static openDatabase(){var reviewsList;var dbPromise=idb.open("restaurants",2,function(upgradeDb){switch(upgradeDb.oldVersion){case 0:if(!upgradeDb.objectStoreNames.contains("restaurantsList")){upgradeDb.createObjectStore("restaurantsList",{keyPath:"id"})}
case 1:if(!upgradeDb.objectStoreNames.contains("reviewsList")){const reviewsStore=upgradeDb.createObjectStore("reviewsList",{keyPath:"id"});reviewsStore.createIndex('restaurant_id','restaurant_id')}}});return dbPromise}
static fetchRestaurants(callback){if(navigator.onLine){var url=DBHelper.DATABASE_URL+'restaurants';fetch(url,{method:"GET"}).then(resp=>{return resp.json()}).then(restaurants=>{var dbPromise=DBHelper.openDatabase();dbPromise.then(db=>{if(!db)return;const tx=db.transaction("restaurantsList","readwrite");let store=tx.objectStore("restaurantsList");restaurants.forEach(res=>{store.put(res)});return tx.complete});callback(null,restaurants)}).catch(error=>{callback(error,null)})}else{return DBHelper.cacheRestaurantsFromDb().then(restaurants=>{if(restaurants.length){callback(null,restaurants)}})}}
static cacheRestaurantsFromDb(){var dbPromise=DBHelper.openDatabase();var restaurants=dbPromise.then(function(db){var tx=db.transaction("restaurantsList","readonly");var store=tx.objectStore("restaurantsList");return store.getAll()});return restaurants}
static cacheReviewsFromDb(id){var dbPromise=DBHelper.openDatabase();var reviews=dbPromise.then(function(db){var tx=db.transaction("reviewsList","readonly");var store=tx.objectStore("reviewsList");return store.getAll(id)});return reviews}
static fetchReviewsByRestaurantId(id,callback){if(navigator.onLine){var url=DBHelper.DATABASE_URL+"reviews/?restaurant_id="+id;fetch(url,{method:"GET"}).then(resp=>{return resp.json()}).then(reviews=>{callback(null,reviews)}).catch(error=>{callback(error,null)})}else{return DBHelper.cacheReviewsFromDb().then(reviews=>{if(reviews.length){callback(null,reviews)}})}}
static saveRestaurantsFavoriteToDatabase(restaurants){var dbPromise=DBHelper.openDatabase();dbPromise.then(db=>{if(!db)return;const tx=db.transaction("restaurantsList","readwrite");let store=tx.objectStore("restaurantsList");restaurants.forEach(res=>{store.getAll(restaurants.id).put(res)});return tx.complete})}
static saveReviewsToDatabase(reviews){var dbPromise=DBHelper.openDatabase();dbPromise.then(db=>{if(!db)return;const tx=db.transaction("reviewsList","readwrite");let store=tx.objectStore("reviewsList");if(reviews&&typeof reviews==='object'&&reviews.constructor===Array){reviews.forEach(res=>{store.put(res)})}
else{store.put(reviews)}
return tx.complete})}
static saveRestaurantFavoriteToDatabase(isFavorite,restaurantId){var dbPromise=DBHelper.openDatabase();dbPromise.then(db=>{if(!db)return;const tx=db.transaction("restaurantsList","readwrite");let store=tx.objectStore("restaurantsList");store.get(restaurantId).then(function(restaurant){restaurant.is_favorite=isFavorite.toString();store.put(restaurant)})})}
static sendRestaurantFavoriteToServer(restaurantId,isFavorite){console.log('Updating Restaurant Favorite : ',isFavorite);var url="http://localhost:1337/restaurants/"+restaurantId+"/?is_favorite="+isFavorite;fetch(url,{method:'PUT'}).then(function(response){return response.json()}).then(function(data){console.log("Saved favorite successfully");DBHelper.saveRestaurantFavoriteToDatabase(isFavorite,restaurantId)}).catch(function(error){return console.log('error:',error)})}
static sendReviewToServer(reviewData){console.log('Sending Reviews : ',reviewData);var fetch_options={method:'POST',body:JSON.stringify(reviewData),headers:new Headers({'Content-Type':'application/json'})};fetch(`http://localhost:1337/reviews`,fetch_options).then((response)=>{return response.json()}).then((data)=>{console.log(`Saved reviews successfully`);DBHelper.saveReviewsToDatabase(data)}).catch(error=>console.log('error:',error))}
static saveReviewsTolocalStorage(offlineReviewsList){window.localStorage.setItem("reviews",JSON.stringify(offlineReviewsList))}
static saveRestaurantTolocalStorage(offlineRestaurantList){window.localStorage.setItem("restaurant_favorite",JSON.stringify(offlineRestaurantList))}
static getRestaurantsFromlocalStorage(id){var offlineRestaurantFav=[];var offlineRestaurantFavList;if(window.localStorage.getItem("restaurant_favorite")!==null){offlineRestaurantFavList=JSON.parse(window.localStorage.getItem("restaurant_favorite"));for(var i=0;i<offlineRestaurantFavList.length;i++){if(offlineRestaurantFavList[i].id===id){if(window.navigator.onLine){var id=offlineRestaurantFavList[i].id;var fav=offlineRestaurantFavList[i].is_favorite;DBHelper.sendRestaurantFavoriteToServer(id,fav)}
offlineRestaurantFav.push(offlineRestaurantFavList[i]);offlineRestaurantFavList.splice(i,1)}
localStorage.restaurant_favorite=JSON.stringify(offlineRestaurantFavList)}}
return offlineRestaurantFav}
static getReviewsFromlocalStorage(id){var offlineReviews=[];var offlineReviewsList;if(window.localStorage.getItem("reviews")!==null){offlineReviewsList=JSON.parse(window.localStorage.getItem("reviews"));for(var i=0;i<offlineReviewsList.length;i++){if(offlineReviewsList[i].restaurant_id===id){if(window.navigator.onLine)
DBHelper.sendReviewToServer(offlineReviewsList[i]);offlineReviews.push(offlineReviewsList[i]);offlineReviewsList.splice(i,1)}
localStorage.reviews=JSON.stringify(offlineReviewsList)}}
return offlineReviews}
static fetchRestaurantById(id,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const restaurant=restaurants.find(r=>r.id==id);if(restaurant){callback(null,restaurant)}else{callback("Restaurant does not exist",null)}}})}
static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}
static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}
static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{let results=restaurants;if(cuisine!="all"){results=results.filter(r=>r.cuisine_type==cuisine)}
if(neighborhood!="all"){results=results.filter(r=>r.neighborhood==neighborhood)}
callback(null,results)}})}
static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood);const uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);callback(null,uniqueNeighborhoods)}})}
static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type);const uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);callback(null,uniqueCuisines)}})}
static urlForRestaurant(restaurant){return(`./restaurant.html?id=${restaurant.id}`)}
static imageUrlForRestaurant(restaurant){return(`/img/${restaurant.photograph}.webp`)}
static mapMarkerForRestaurant(restaurant){const marker=new L.marker([restaurant.latlng.lat,restaurant.latlng.lng],{title:restaurant.name,alt:restaurant.name,url:DBHelper.urlForRestaurant(restaurant)});marker.addTo(newMap);return marker}}